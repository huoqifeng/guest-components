// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.4
// source: cdhgrpc.proto

package cdhgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SealedSecretService_UnsealSecret_FullMethodName = "/api.SealedSecretService/UnsealSecret"
)

// SealedSecretServiceClient is the client API for SealedSecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SealedSecretServiceClient interface {
	UnsealSecret(ctx context.Context, in *UnsealSecretInput, opts ...grpc.CallOption) (*UnsealSecretOutput, error)
}

type sealedSecretServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSealedSecretServiceClient(cc grpc.ClientConnInterface) SealedSecretServiceClient {
	return &sealedSecretServiceClient{cc}
}

func (c *sealedSecretServiceClient) UnsealSecret(ctx context.Context, in *UnsealSecretInput, opts ...grpc.CallOption) (*UnsealSecretOutput, error) {
	out := new(UnsealSecretOutput)
	err := c.cc.Invoke(ctx, SealedSecretService_UnsealSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SealedSecretServiceServer is the server API for SealedSecretService service.
// All implementations must embed UnimplementedSealedSecretServiceServer
// for forward compatibility
type SealedSecretServiceServer interface {
	UnsealSecret(context.Context, *UnsealSecretInput) (*UnsealSecretOutput, error)
	mustEmbedUnimplementedSealedSecretServiceServer()
}

// UnimplementedSealedSecretServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSealedSecretServiceServer struct {
}

func (UnimplementedSealedSecretServiceServer) UnsealSecret(context.Context, *UnsealSecretInput) (*UnsealSecretOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsealSecret not implemented")
}
func (UnimplementedSealedSecretServiceServer) mustEmbedUnimplementedSealedSecretServiceServer() {}

// UnsafeSealedSecretServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SealedSecretServiceServer will
// result in compilation errors.
type UnsafeSealedSecretServiceServer interface {
	mustEmbedUnimplementedSealedSecretServiceServer()
}

func RegisterSealedSecretServiceServer(s grpc.ServiceRegistrar, srv SealedSecretServiceServer) {
	s.RegisterService(&SealedSecretService_ServiceDesc, srv)
}

func _SealedSecretService_UnsealSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsealSecretInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SealedSecretServiceServer).UnsealSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SealedSecretService_UnsealSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SealedSecretServiceServer).UnsealSecret(ctx, req.(*UnsealSecretInput))
	}
	return interceptor(ctx, in, info, handler)
}

// SealedSecretService_ServiceDesc is the grpc.ServiceDesc for SealedSecretService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SealedSecretService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SealedSecretService",
	HandlerType: (*SealedSecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnsealSecret",
			Handler:    _SealedSecretService_UnsealSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdhgrpc.proto",
}

const (
	GetResourceService_GetResource_FullMethodName = "/api.GetResourceService/GetResource"
)

// GetResourceServiceClient is the client API for GetResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetResourceServiceClient interface {
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
}

type getResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetResourceServiceClient(cc grpc.ClientConnInterface) GetResourceServiceClient {
	return &getResourceServiceClient{cc}
}

func (c *getResourceServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, GetResourceService_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetResourceServiceServer is the server API for GetResourceService service.
// All implementations must embed UnimplementedGetResourceServiceServer
// for forward compatibility
type GetResourceServiceServer interface {
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	mustEmbedUnimplementedGetResourceServiceServer()
}

// UnimplementedGetResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetResourceServiceServer struct {
}

func (UnimplementedGetResourceServiceServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedGetResourceServiceServer) mustEmbedUnimplementedGetResourceServiceServer() {}

// UnsafeGetResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetResourceServiceServer will
// result in compilation errors.
type UnsafeGetResourceServiceServer interface {
	mustEmbedUnimplementedGetResourceServiceServer()
}

func RegisterGetResourceServiceServer(s grpc.ServiceRegistrar, srv GetResourceServiceServer) {
	s.RegisterService(&GetResourceService_ServiceDesc, srv)
}

func _GetResourceService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetResourceServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetResourceService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetResourceServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetResourceService_ServiceDesc is the grpc.ServiceDesc for GetResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GetResourceService",
	HandlerType: (*GetResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResource",
			Handler:    _GetResourceService_GetResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdhgrpc.proto",
}

const (
	SecureMountService_SecureMount_FullMethodName = "/api.SecureMountService/SecureMount"
)

// SecureMountServiceClient is the client API for SecureMountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecureMountServiceClient interface {
	SecureMount(ctx context.Context, in *SecureMountRequest, opts ...grpc.CallOption) (*SecureMountResponse, error)
}

type secureMountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecureMountServiceClient(cc grpc.ClientConnInterface) SecureMountServiceClient {
	return &secureMountServiceClient{cc}
}

func (c *secureMountServiceClient) SecureMount(ctx context.Context, in *SecureMountRequest, opts ...grpc.CallOption) (*SecureMountResponse, error) {
	out := new(SecureMountResponse)
	err := c.cc.Invoke(ctx, SecureMountService_SecureMount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecureMountServiceServer is the server API for SecureMountService service.
// All implementations must embed UnimplementedSecureMountServiceServer
// for forward compatibility
type SecureMountServiceServer interface {
	SecureMount(context.Context, *SecureMountRequest) (*SecureMountResponse, error)
	mustEmbedUnimplementedSecureMountServiceServer()
}

// UnimplementedSecureMountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecureMountServiceServer struct {
}

func (UnimplementedSecureMountServiceServer) SecureMount(context.Context, *SecureMountRequest) (*SecureMountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecureMount not implemented")
}
func (UnimplementedSecureMountServiceServer) mustEmbedUnimplementedSecureMountServiceServer() {}

// UnsafeSecureMountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecureMountServiceServer will
// result in compilation errors.
type UnsafeSecureMountServiceServer interface {
	mustEmbedUnimplementedSecureMountServiceServer()
}

func RegisterSecureMountServiceServer(s grpc.ServiceRegistrar, srv SecureMountServiceServer) {
	s.RegisterService(&SecureMountService_ServiceDesc, srv)
}

func _SecureMountService_SecureMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecureMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureMountServiceServer).SecureMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureMountService_SecureMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureMountServiceServer).SecureMount(ctx, req.(*SecureMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecureMountService_ServiceDesc is the grpc.ServiceDesc for SecureMountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecureMountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SecureMountService",
	HandlerType: (*SecureMountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecureMount",
			Handler:    _SecureMountService_SecureMount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdhgrpc.proto",
}
